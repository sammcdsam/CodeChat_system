// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "EditorPlugin.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include "Calculator.h"
//#include "CodeChat_Services/CodeChat_Services.thrift"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class EditorPluginHandler : virtual public EditorPluginIf {
 public:
  EditorPluginHandler() {
    // Your initialization goes here
  }

  void ping(std::string& _return) {
    // Your implementation goes here
    printf("ping\n");
  }

  void get_client(RenderClientReturn& _return, const CodeChatClientLocation::type codeChat_client_location) {
    // Your implementation goes here
    printf("get_client\n");
  }

  void start_render(std::string& _return, const std::string& text, const std::string& path, const int32_t id, const bool is_dirty) {
    // Your implementation goes here
    printf("start_render\n");
  }

  void stop_client(std::string& _return, const int32_t id) {
    // Your implementation goes here
    printf("stop_client\n");
  }

};

int main(int argc, char **argv) {
  int port = 27376;
  ::std::shared_ptr<EditorPluginHandler> handler(new EditorPluginHandler());
  ::std::shared_ptr<TProcessor> processor(new EditorPluginProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

