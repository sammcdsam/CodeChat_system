/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef EditorPlugin_H
#define EditorPlugin_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "CodeChat_Services_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class EditorPluginIf {
 public:
  virtual ~EditorPluginIf() {}
  virtual void ping(std::string& _return) = 0;
  virtual void get_client(RenderClientReturn& _return, const CodeChatClientLocation::type codeChat_client_location) = 0;
  virtual void start_render(std::string& _return, const std::string& text, const std::string& path, const int32_t id, const bool is_dirty) = 0;
  virtual void stop_client(std::string& _return, const int32_t id) = 0;
};

class EditorPluginIfFactory {
 public:
  typedef EditorPluginIf Handler;

  virtual ~EditorPluginIfFactory() {}

  virtual EditorPluginIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(EditorPluginIf* /* handler */) = 0;
  };

class EditorPluginIfSingletonFactory : virtual public EditorPluginIfFactory {
 public:
  EditorPluginIfSingletonFactory(const ::std::shared_ptr<EditorPluginIf>& iface) : iface_(iface) {}
  virtual ~EditorPluginIfSingletonFactory() {}

  virtual EditorPluginIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(EditorPluginIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<EditorPluginIf> iface_;
};

class EditorPluginNull : virtual public EditorPluginIf {
 public:
  virtual ~EditorPluginNull() {}
  void ping(std::string& /* _return */) override {
    return;
  }
  void get_client(RenderClientReturn& /* _return */, const CodeChatClientLocation::type /* codeChat_client_location */) override {
    return;
  }
  void start_render(std::string& /* _return */, const std::string& /* text */, const std::string& /* path */, const int32_t /* id */, const bool /* is_dirty */) override {
    return;
  }
  void stop_client(std::string& /* _return */, const int32_t /* id */) override {
    return;
  }
};


class EditorPlugin_ping_args {
 public:

  EditorPlugin_ping_args(const EditorPlugin_ping_args&) noexcept;
  EditorPlugin_ping_args& operator=(const EditorPlugin_ping_args&) noexcept;
  EditorPlugin_ping_args() noexcept {
  }

  virtual ~EditorPlugin_ping_args() noexcept;

  bool operator == (const EditorPlugin_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EditorPlugin_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EditorPlugin_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EditorPlugin_ping_pargs {
 public:


  virtual ~EditorPlugin_ping_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EditorPlugin_ping_result__isset {
  _EditorPlugin_ping_result__isset() : success(false) {}
  bool success :1;
} _EditorPlugin_ping_result__isset;

class EditorPlugin_ping_result {
 public:

  EditorPlugin_ping_result(const EditorPlugin_ping_result&);
  EditorPlugin_ping_result& operator=(const EditorPlugin_ping_result&);
  EditorPlugin_ping_result() noexcept
                           : success() {
  }

  virtual ~EditorPlugin_ping_result() noexcept;
  std::string success;

  _EditorPlugin_ping_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const EditorPlugin_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EditorPlugin_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EditorPlugin_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EditorPlugin_ping_presult__isset {
  _EditorPlugin_ping_presult__isset() : success(false) {}
  bool success :1;
} _EditorPlugin_ping_presult__isset;

class EditorPlugin_ping_presult {
 public:


  virtual ~EditorPlugin_ping_presult() noexcept;
  std::string* success;

  _EditorPlugin_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EditorPlugin_get_client_args__isset {
  _EditorPlugin_get_client_args__isset() : codeChat_client_location(false) {}
  bool codeChat_client_location :1;
} _EditorPlugin_get_client_args__isset;

class EditorPlugin_get_client_args {
 public:

  EditorPlugin_get_client_args(const EditorPlugin_get_client_args&) noexcept;
  EditorPlugin_get_client_args& operator=(const EditorPlugin_get_client_args&) noexcept;
  EditorPlugin_get_client_args() noexcept
                               : codeChat_client_location(static_cast<CodeChatClientLocation::type>(0)) {
  }

  virtual ~EditorPlugin_get_client_args() noexcept;
  /**
   * 
   * @see CodeChatClientLocation
   */
  CodeChatClientLocation::type codeChat_client_location;

  _EditorPlugin_get_client_args__isset __isset;

  void __set_codeChat_client_location(const CodeChatClientLocation::type val);

  bool operator == (const EditorPlugin_get_client_args & rhs) const
  {
    if (!(codeChat_client_location == rhs.codeChat_client_location))
      return false;
    return true;
  }
  bool operator != (const EditorPlugin_get_client_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EditorPlugin_get_client_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EditorPlugin_get_client_pargs {
 public:


  virtual ~EditorPlugin_get_client_pargs() noexcept;
  /**
   * 
   * @see CodeChatClientLocation
   */
  const CodeChatClientLocation::type* codeChat_client_location;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EditorPlugin_get_client_result__isset {
  _EditorPlugin_get_client_result__isset() : success(false) {}
  bool success :1;
} _EditorPlugin_get_client_result__isset;

class EditorPlugin_get_client_result {
 public:

  EditorPlugin_get_client_result(const EditorPlugin_get_client_result&);
  EditorPlugin_get_client_result& operator=(const EditorPlugin_get_client_result&);
  EditorPlugin_get_client_result() noexcept {
  }

  virtual ~EditorPlugin_get_client_result() noexcept;
  RenderClientReturn success;

  _EditorPlugin_get_client_result__isset __isset;

  void __set_success(const RenderClientReturn& val);

  bool operator == (const EditorPlugin_get_client_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EditorPlugin_get_client_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EditorPlugin_get_client_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EditorPlugin_get_client_presult__isset {
  _EditorPlugin_get_client_presult__isset() : success(false) {}
  bool success :1;
} _EditorPlugin_get_client_presult__isset;

class EditorPlugin_get_client_presult {
 public:


  virtual ~EditorPlugin_get_client_presult() noexcept;
  RenderClientReturn* success;

  _EditorPlugin_get_client_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EditorPlugin_start_render_args__isset {
  _EditorPlugin_start_render_args__isset() : text(false), path(false), id(false), is_dirty(false) {}
  bool text :1;
  bool path :1;
  bool id :1;
  bool is_dirty :1;
} _EditorPlugin_start_render_args__isset;

class EditorPlugin_start_render_args {
 public:

  EditorPlugin_start_render_args(const EditorPlugin_start_render_args&);
  EditorPlugin_start_render_args& operator=(const EditorPlugin_start_render_args&);
  EditorPlugin_start_render_args() noexcept
                                 : text(),
                                   path(),
                                   id(0),
                                   is_dirty(0) {
  }

  virtual ~EditorPlugin_start_render_args() noexcept;
  std::string text;
  std::string path;
  int32_t id;
  bool is_dirty;

  _EditorPlugin_start_render_args__isset __isset;

  void __set_text(const std::string& val);

  void __set_path(const std::string& val);

  void __set_id(const int32_t val);

  void __set_is_dirty(const bool val);

  bool operator == (const EditorPlugin_start_render_args & rhs) const
  {
    if (!(text == rhs.text))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(is_dirty == rhs.is_dirty))
      return false;
    return true;
  }
  bool operator != (const EditorPlugin_start_render_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EditorPlugin_start_render_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EditorPlugin_start_render_pargs {
 public:


  virtual ~EditorPlugin_start_render_pargs() noexcept;
  const std::string* text;
  const std::string* path;
  const int32_t* id;
  const bool* is_dirty;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EditorPlugin_start_render_result__isset {
  _EditorPlugin_start_render_result__isset() : success(false) {}
  bool success :1;
} _EditorPlugin_start_render_result__isset;

class EditorPlugin_start_render_result {
 public:

  EditorPlugin_start_render_result(const EditorPlugin_start_render_result&);
  EditorPlugin_start_render_result& operator=(const EditorPlugin_start_render_result&);
  EditorPlugin_start_render_result() noexcept
                                   : success() {
  }

  virtual ~EditorPlugin_start_render_result() noexcept;
  std::string success;

  _EditorPlugin_start_render_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const EditorPlugin_start_render_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EditorPlugin_start_render_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EditorPlugin_start_render_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EditorPlugin_start_render_presult__isset {
  _EditorPlugin_start_render_presult__isset() : success(false) {}
  bool success :1;
} _EditorPlugin_start_render_presult__isset;

class EditorPlugin_start_render_presult {
 public:


  virtual ~EditorPlugin_start_render_presult() noexcept;
  std::string* success;

  _EditorPlugin_start_render_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EditorPlugin_stop_client_args__isset {
  _EditorPlugin_stop_client_args__isset() : id(false) {}
  bool id :1;
} _EditorPlugin_stop_client_args__isset;

class EditorPlugin_stop_client_args {
 public:

  EditorPlugin_stop_client_args(const EditorPlugin_stop_client_args&) noexcept;
  EditorPlugin_stop_client_args& operator=(const EditorPlugin_stop_client_args&) noexcept;
  EditorPlugin_stop_client_args() noexcept
                                : id(0) {
  }

  virtual ~EditorPlugin_stop_client_args() noexcept;
  int32_t id;

  _EditorPlugin_stop_client_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const EditorPlugin_stop_client_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const EditorPlugin_stop_client_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EditorPlugin_stop_client_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EditorPlugin_stop_client_pargs {
 public:


  virtual ~EditorPlugin_stop_client_pargs() noexcept;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EditorPlugin_stop_client_result__isset {
  _EditorPlugin_stop_client_result__isset() : success(false) {}
  bool success :1;
} _EditorPlugin_stop_client_result__isset;

class EditorPlugin_stop_client_result {
 public:

  EditorPlugin_stop_client_result(const EditorPlugin_stop_client_result&);
  EditorPlugin_stop_client_result& operator=(const EditorPlugin_stop_client_result&);
  EditorPlugin_stop_client_result() noexcept
                                  : success() {
  }

  virtual ~EditorPlugin_stop_client_result() noexcept;
  std::string success;

  _EditorPlugin_stop_client_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const EditorPlugin_stop_client_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EditorPlugin_stop_client_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EditorPlugin_stop_client_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EditorPlugin_stop_client_presult__isset {
  _EditorPlugin_stop_client_presult__isset() : success(false) {}
  bool success :1;
} _EditorPlugin_stop_client_presult__isset;

class EditorPlugin_stop_client_presult {
 public:


  virtual ~EditorPlugin_stop_client_presult() noexcept;
  std::string* success;

  _EditorPlugin_stop_client_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class EditorPluginClient : virtual public EditorPluginIf {
 public:
  EditorPluginClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  EditorPluginClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(std::string& _return) override;
  void send_ping();
  void recv_ping(std::string& _return);
  void get_client(RenderClientReturn& _return, const CodeChatClientLocation::type codeChat_client_location) override;
  void send_get_client(const CodeChatClientLocation::type codeChat_client_location);
  void recv_get_client(RenderClientReturn& _return);
  void start_render(std::string& _return, const std::string& text, const std::string& path, const int32_t id, const bool is_dirty) override;
  void send_start_render(const std::string& text, const std::string& path, const int32_t id, const bool is_dirty);
  void recv_start_render(std::string& _return);
  void stop_client(std::string& _return, const int32_t id) override;
  void send_stop_client(const int32_t id);
  void recv_stop_client(std::string& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class EditorPluginProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<EditorPluginIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (EditorPluginProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_client(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start_render(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stop_client(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  EditorPluginProcessor(::std::shared_ptr<EditorPluginIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &EditorPluginProcessor::process_ping;
    processMap_["get_client"] = &EditorPluginProcessor::process_get_client;
    processMap_["start_render"] = &EditorPluginProcessor::process_start_render;
    processMap_["stop_client"] = &EditorPluginProcessor::process_stop_client;
  }

  virtual ~EditorPluginProcessor() {}
};

class EditorPluginProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  EditorPluginProcessorFactory(const ::std::shared_ptr< EditorPluginIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< EditorPluginIfFactory > handlerFactory_;
};

class EditorPluginMultiface : virtual public EditorPluginIf {
 public:
  EditorPluginMultiface(std::vector<std::shared_ptr<EditorPluginIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~EditorPluginMultiface() {}
 protected:
  std::vector<std::shared_ptr<EditorPluginIf> > ifaces_;
  EditorPluginMultiface() {}
  void add(::std::shared_ptr<EditorPluginIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping(std::string& _return) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return);
    }
    ifaces_[i]->ping(_return);
    return;
  }

  void get_client(RenderClientReturn& _return, const CodeChatClientLocation::type codeChat_client_location) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_client(_return, codeChat_client_location);
    }
    ifaces_[i]->get_client(_return, codeChat_client_location);
    return;
  }

  void start_render(std::string& _return, const std::string& text, const std::string& path, const int32_t id, const bool is_dirty) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start_render(_return, text, path, id, is_dirty);
    }
    ifaces_[i]->start_render(_return, text, path, id, is_dirty);
    return;
  }

  void stop_client(std::string& _return, const int32_t id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stop_client(_return, id);
    }
    ifaces_[i]->stop_client(_return, id);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class EditorPluginConcurrentClient : virtual public EditorPluginIf {
 public:
  EditorPluginConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  EditorPluginConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(std::string& _return) override;
  int32_t send_ping();
  void recv_ping(std::string& _return, const int32_t seqid);
  void get_client(RenderClientReturn& _return, const CodeChatClientLocation::type codeChat_client_location) override;
  int32_t send_get_client(const CodeChatClientLocation::type codeChat_client_location);
  void recv_get_client(RenderClientReturn& _return, const int32_t seqid);
  void start_render(std::string& _return, const std::string& text, const std::string& path, const int32_t id, const bool is_dirty) override;
  int32_t send_start_render(const std::string& text, const std::string& path, const int32_t id, const bool is_dirty);
  void recv_start_render(std::string& _return, const int32_t seqid);
  void stop_client(std::string& _return, const int32_t id) override;
  int32_t send_stop_client(const int32_t id);
  void recv_stop_client(std::string& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
