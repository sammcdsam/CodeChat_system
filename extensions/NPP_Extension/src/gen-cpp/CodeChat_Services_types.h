/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CodeChat_Services_TYPES_H
#define CodeChat_Services_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




struct CodeChatClientLocation {
  enum type {
    url = 0,
    html = 1,
    browser = 2
  };
};

extern const std::map<int, const char*> _CodeChatClientLocation_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const CodeChatClientLocation::type& val);

std::string to_string(const CodeChatClientLocation::type& val);

class RenderClientReturn;

typedef struct _RenderClientReturn__isset {
  _RenderClientReturn__isset() : html(false), id(false), error(false) {}
  bool html :1;
  bool id :1;
  bool error :1;
} _RenderClientReturn__isset;

class RenderClientReturn : public virtual ::apache::thrift::TBase {
 public:

  RenderClientReturn(const RenderClientReturn&);
  RenderClientReturn& operator=(const RenderClientReturn&);
  RenderClientReturn() noexcept
                     : html(),
                       id(0),
                       error() {
  }

  virtual ~RenderClientReturn() noexcept;
  std::string html;
  int32_t id;
  std::string error;

  _RenderClientReturn__isset __isset;

  void __set_html(const std::string& val);

  void __set_id(const int32_t val);

  void __set_error(const std::string& val);

  bool operator == (const RenderClientReturn & rhs) const
  {
    if (!(html == rhs.html))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const RenderClientReturn &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenderClientReturn & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(RenderClientReturn &a, RenderClientReturn &b);

std::ostream& operator<<(std::ostream& out, const RenderClientReturn& obj);



#endif
